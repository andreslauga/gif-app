{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GiffExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","i","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAIIA,EAAUC,OAJd,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,QCJJS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAErB,ECHwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACN1B,EAAQC,GAAU0B,MAAK,SAAAC,GACnBH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGlB,CAACtB,IAGGuB,EDd2BK,CAAa5B,GAAjCa,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDlB,IAElDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEetBkB,EA7BM,WAEjB,MAAoC3C,mBAAS,CAAC,WAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAOA,OACI,qCACI,8CACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEQS,EAAWe,KAAI,SAACT,EAAU8B,GAAX,OACX,cAAC,EAAD,CAEI9B,SAAWA,GADLA,YCnBlC+B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.580fa96b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault(); // esto previene con comportamiento por defecto del elemento form, el cual hace el equivalente a un f5 del navegador, y no queremos eso.\n\n        if (inputValue.trim().length > 2) {\n            setCategories(categories => [inputValue, ...categories]);\n            setInputValue('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async ( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=fgBNWWZf66lqrgWvyPOWOGs8k2D4kTzW`;\n    const respuesta = await fetch(url);\n    const { data } = await respuesta.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        };\n    });\n    \n    return gifs;\n};","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n\n    console.log(id, title, url)\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">   \n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    \n    const { data: images, loading } = useFetchGifs(category);\n   \n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}/>\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import {useEffect, useState} from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n            setstate({\n                data: imgs,\n                loading: false\n            });\n        });\n    }, [category]); // si en el segundo parametro no agregamos dependencias [], el método getGifs() solo se llama al renderizar el componente por primera vez. Pero como agregamos category, ahora se va a llamar cada vez que este la category cambie.\n\n\n    return state; // retorna el objeto declarado en useState\n\n};","import React, { useState } from 'react';\nimport { AddCategory } from './Components/AddCategory';\nimport { GifGrid } from './Components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Marvel']);\n\n    // const handleAdd = () => {\n    //     setCategories([...categories, 'HunterXHunter']); // cambiamos el estado directamente con lo que pasamos como parámetro\n    //     setCategories(categories => [...categories, 'HunterXHunter']); otra opción es le pasamos un callback que cambia el estado\n    // };\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <hr/>\n\n            <AddCategory setCategories={setCategories}/>\n\n            <ol>\n                { \n                    categories.map((category, i) => (\n                        <GifGrid \n                            key={ category }\n                            category={ category }/>\n                    ))\n                }\n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from '../src/GiffExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n// Crear un componente llamado GifExpertApp que contendrá:\n// * Un <h2>GifExpertApp</h2>\n// * Un <hr/>"],"sourceRoot":""}